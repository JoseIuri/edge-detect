/*
 * This file was generated by the scsynth tool, and is available for use under
 * the MIT license. More information can be found at
 * https://github.com/arminalaghi/scsynth/
 */
module MReSC_wrapper_Sobel3x3_g2( //handles stochastic/binary conversion for ReSC
	input [7:0] x_1_bin, //binary value of input 1
	input [7:0] x_2_bin, //binary value of input 2
	input [7:0] x_3_bin, //binary value of input 3
	input [7:0] x_4_bin, //binary value of input 4
	input [7:0] x_5_bin, //binary value of input 5
	input [7:0] x_6_bin, //binary value of input 6
	input [7:0] x_7_bin, //binary value of input 7
	input [7:0] x_8_bin, //binary value of input 8
	input start, //signal to start counting
	output reg done, //signal that a number has been computed 
	output reg [7:0] z_bin, //binary value of output

	input clk,
	input reset
);

	//the weights of the Bernstein polynomial
	reg [7:0] w0_bin = 8'd0;
	reg [7:0] w1_bin = 8'd0;
	reg [7:0] w2_bin = 8'd0;
	reg [7:0] w3_bin = 8'd255;
	reg [7:0] w4_bin = 8'd0;
	reg [7:0] w5_bin = 8'd0;
	reg [7:0] w6_bin = 8'd255;
	reg [7:0] w7_bin = 8'd255;
	reg [7:0] w8_bin = 8'd0;
	reg [7:0] w9_bin = 8'd255;
	reg [7:0] w10_bin = 8'd0;
	reg [7:0] w11_bin = 8'd255;
	reg [7:0] w12_bin = 8'd0;
	reg [7:0] w13_bin = 8'd147;
	reg [7:0] w14_bin = 8'd255;
	reg [7:0] w15_bin = 8'd255;
	reg [7:0] w16_bin = 8'd0;
	reg [7:0] w17_bin = 8'd0;
	reg [7:0] w18_bin = 8'd177;
	reg [7:0] w19_bin = 8'd255;
	reg [7:0] w20_bin = 8'd255;
	reg [7:0] w21_bin = 8'd157;
	reg [7:0] w22_bin = 8'd255;
	reg [7:0] w23_bin = 8'd255;
	reg [7:0] w24_bin = 8'd0;
	reg [7:0] w25_bin = 8'd0;
	reg [7:0] w26_bin = 8'd0;
	reg [7:0] w27_bin = 8'd255;
	reg [7:0] w28_bin = 8'd0;
	reg [7:0] w29_bin = 8'd0;
	reg [7:0] w30_bin = 8'd255;
	reg [7:0] w31_bin = 8'd255;
	reg [7:0] w32_bin = 8'd0;
	reg [7:0] w33_bin = 8'd0;
	reg [7:0] w34_bin = 8'd0;
	reg [7:0] w35_bin = 8'd147;
	reg [7:0] w36_bin = 8'd0;
	reg [7:0] w37_bin = 8'd0;
	reg [7:0] w38_bin = 8'd0;
	reg [7:0] w39_bin = 8'd255;
	reg [7:0] w40_bin = 8'd255;
	reg [7:0] w41_bin = 8'd255;
	reg [7:0] w42_bin = 8'd255;
	reg [7:0] w43_bin = 8'd255;
	reg [7:0] w44_bin = 8'd0;
	reg [7:0] w45_bin = 8'd255;
	reg [7:0] w46_bin = 8'd255;
	reg [7:0] w47_bin = 8'd255;
	reg [7:0] w48_bin = 8'd0;
	reg [7:0] w49_bin = 8'd0;
	reg [7:0] w50_bin = 8'd0;
	reg [7:0] w51_bin = 8'd0;
	reg [7:0] w52_bin = 8'd0;
	reg [7:0] w53_bin = 8'd0;
	reg [7:0] w54_bin = 8'd0;
	reg [7:0] w55_bin = 8'd255;
	reg [7:0] w56_bin = 8'd0;
	reg [7:0] w57_bin = 8'd0;
	reg [7:0] w58_bin = 8'd0;
	reg [7:0] w59_bin = 8'd157;
	reg [7:0] w60_bin = 8'd0;
	reg [7:0] w61_bin = 8'd0;
	reg [7:0] w62_bin = 8'd0;
	reg [7:0] w63_bin = 8'd255;
	reg [7:0] w64_bin = 8'd0;
	reg [7:0] w65_bin = 8'd0;
	reg [7:0] w66_bin = 8'd0;
	reg [7:0] w67_bin = 8'd0;
	reg [7:0] w68_bin = 8'd0;
	reg [7:0] w69_bin = 8'd0;
	reg [7:0] w70_bin = 8'd0;
	reg [7:0] w71_bin = 8'd0;
	reg [7:0] w72_bin = 8'd255;
	reg [7:0] w73_bin = 8'd255;
	reg [7:0] w74_bin = 8'd0;
	reg [7:0] w75_bin = 8'd255;
	reg [7:0] w76_bin = 8'd0;
	reg [7:0] w77_bin = 8'd0;
	reg [7:0] w78_bin = 8'd0;
	reg [7:0] w79_bin = 8'd157;
	reg [7:0] w80_bin = 8'd0;
	reg [7:0] w81_bin = 8'd0;
	reg [7:0] w82_bin = 8'd0;
	reg [7:0] w83_bin = 8'd0;
	reg [7:0] w84_bin = 8'd255;
	reg [7:0] w85_bin = 8'd0;
	reg [7:0] w86_bin = 8'd255;
	reg [7:0] w87_bin = 8'd147;
	reg [7:0] w88_bin = 8'd0;
	reg [7:0] w89_bin = 8'd0;
	reg [7:0] w90_bin = 8'd0;
	reg [7:0] w91_bin = 8'd0;
	reg [7:0] w92_bin = 8'd0;
	reg [7:0] w93_bin = 8'd0;
	reg [7:0] w94_bin = 8'd0;
	reg [7:0] w95_bin = 8'd0;
	reg [7:0] w96_bin = 8'd255;
	reg [7:0] w97_bin = 8'd157;
	reg [7:0] w98_bin = 8'd0;
	reg [7:0] w99_bin = 8'd0;
	reg [7:0] w100_bin = 8'd0;
	reg [7:0] w101_bin = 8'd0;
	reg [7:0] w102_bin = 8'd0;
	reg [7:0] w103_bin = 8'd0;
	reg [7:0] w104_bin = 8'd255;
	reg [7:0] w105_bin = 8'd255;
	reg [7:0] w106_bin = 8'd255;
	reg [7:0] w107_bin = 8'd255;
	reg [7:0] w108_bin = 8'd0;
	reg [7:0] w109_bin = 8'd255;
	reg [7:0] w110_bin = 8'd0;
	reg [7:0] w111_bin = 8'd255;
	reg [7:0] w112_bin = 8'd255;
	reg [7:0] w113_bin = 8'd0;
	reg [7:0] w114_bin = 8'd0;
	reg [7:0] w115_bin = 8'd0;
	reg [7:0] w116_bin = 8'd255;
	reg [7:0] w117_bin = 8'd0;
	reg [7:0] w118_bin = 8'd0;
	reg [7:0] w119_bin = 8'd0;
	reg [7:0] w120_bin = 8'd255;
	reg [7:0] w121_bin = 8'd147;
	reg [7:0] w122_bin = 8'd0;
	reg [7:0] w123_bin = 8'd0;
	reg [7:0] w124_bin = 8'd0;
	reg [7:0] w125_bin = 8'd0;
	reg [7:0] w126_bin = 8'd0;
	reg [7:0] w127_bin = 8'd0;
	reg [7:0] w128_bin = 8'd0;
	reg [7:0] w129_bin = 8'd0;
	reg [7:0] w130_bin = 8'd0;
	reg [7:0] w131_bin = 8'd0;
	reg [7:0] w132_bin = 8'd0;
	reg [7:0] w133_bin = 8'd0;
	reg [7:0] w134_bin = 8'd255;
	reg [7:0] w135_bin = 8'd255;
	reg [7:0] w136_bin = 8'd0;
	reg [7:0] w137_bin = 8'd0;
	reg [7:0] w138_bin = 8'd0;
	reg [7:0] w139_bin = 8'd255;
	reg [7:0] w140_bin = 8'd0;
	reg [7:0] w141_bin = 8'd0;
	reg [7:0] w142_bin = 8'd0;
	reg [7:0] w143_bin = 8'd255;
	reg [7:0] w144_bin = 8'd255;
	reg [7:0] w145_bin = 8'd0;
	reg [7:0] w146_bin = 8'd255;
	reg [7:0] w147_bin = 8'd0;
	reg [7:0] w148_bin = 8'd255;
	reg [7:0] w149_bin = 8'd255;
	reg [7:0] w150_bin = 8'd255;
	reg [7:0] w151_bin = 8'd255;
	reg [7:0] w152_bin = 8'd0;
	reg [7:0] w153_bin = 8'd0;
	reg [7:0] w154_bin = 8'd0;
	reg [7:0] w155_bin = 8'd0;
	reg [7:0] w156_bin = 8'd0;
	reg [7:0] w157_bin = 8'd0;
	reg [7:0] w158_bin = 8'd106;
	reg [7:0] w159_bin = 8'd255;
	reg [7:0] w160_bin = 8'd0;
	reg [7:0] w161_bin = 8'd0;
	reg [7:0] w162_bin = 8'd0;
	reg [7:0] w163_bin = 8'd0;
	reg [7:0] w164_bin = 8'd0;
	reg [7:0] w165_bin = 8'd0;
	reg [7:0] w166_bin = 8'd0;
	reg [7:0] w167_bin = 8'd0;
	reg [7:0] w168_bin = 8'd255;
	reg [7:0] w169_bin = 8'd255;
	reg [7:0] w170_bin = 8'd0;
	reg [7:0] w171_bin = 8'd255;
	reg [7:0] w172_bin = 8'd0;
	reg [7:0] w173_bin = 8'd0;
	reg [7:0] w174_bin = 8'd0;
	reg [7:0] w175_bin = 8'd0;
	reg [7:0] w176_bin = 8'd106;
	reg [7:0] w177_bin = 8'd0;
	reg [7:0] w178_bin = 8'd0;
	reg [7:0] w179_bin = 8'd0;
	reg [7:0] w180_bin = 8'd255;
	reg [7:0] w181_bin = 8'd0;
	reg [7:0] w182_bin = 8'd255;
	reg [7:0] w183_bin = 8'd255;
	reg [7:0] w184_bin = 8'd0;
	reg [7:0] w185_bin = 8'd0;
	reg [7:0] w186_bin = 8'd0;
	reg [7:0] w187_bin = 8'd0;
	reg [7:0] w188_bin = 8'd0;
	reg [7:0] w189_bin = 8'd0;
	reg [7:0] w190_bin = 8'd0;
	reg [7:0] w191_bin = 8'd0;
	reg [7:0] w192_bin = 8'd255;
	reg [7:0] w193_bin = 8'd0;
	reg [7:0] w194_bin = 8'd0;
	reg [7:0] w195_bin = 8'd0;
	reg [7:0] w196_bin = 8'd106;
	reg [7:0] w197_bin = 8'd0;
	reg [7:0] w198_bin = 8'd0;
	reg [7:0] w199_bin = 8'd0;
	reg [7:0] w200_bin = 8'd255;
	reg [7:0] w201_bin = 8'd0;
	reg [7:0] w202_bin = 8'd0;
	reg [7:0] w203_bin = 8'd0;
	reg [7:0] w204_bin = 8'd0;
	reg [7:0] w205_bin = 8'd0;
	reg [7:0] w206_bin = 8'd0;
	reg [7:0] w207_bin = 8'd0;
	reg [7:0] w208_bin = 8'd255;
	reg [7:0] w209_bin = 8'd255;
	reg [7:0] w210_bin = 8'd255;
	reg [7:0] w211_bin = 8'd0;
	reg [7:0] w212_bin = 8'd255;
	reg [7:0] w213_bin = 8'd255;
	reg [7:0] w214_bin = 8'd255;
	reg [7:0] w215_bin = 8'd255;
	reg [7:0] w216_bin = 8'd255;
	reg [7:0] w217_bin = 8'd0;
	reg [7:0] w218_bin = 8'd0;
	reg [7:0] w219_bin = 8'd0;
	reg [7:0] w220_bin = 8'd255;
	reg [7:0] w221_bin = 8'd0;
	reg [7:0] w222_bin = 8'd0;
	reg [7:0] w223_bin = 8'd0;
	reg [7:0] w224_bin = 8'd255;
	reg [7:0] w225_bin = 8'd255;
	reg [7:0] w226_bin = 8'd0;
	reg [7:0] w227_bin = 8'd0;
	reg [7:0] w228_bin = 8'd255;
	reg [7:0] w229_bin = 8'd0;
	reg [7:0] w230_bin = 8'd0;
	reg [7:0] w231_bin = 8'd0;
	reg [7:0] w232_bin = 8'd255;
	reg [7:0] w233_bin = 8'd255;
	reg [7:0] w234_bin = 8'd106;
	reg [7:0] w235_bin = 8'd255;
	reg [7:0] w236_bin = 8'd255;
	reg [7:0] w237_bin = 8'd177;
	reg [7:0] w238_bin = 8'd0;
	reg [7:0] w239_bin = 8'd0;
	reg [7:0] w240_bin = 8'd255;
	reg [7:0] w241_bin = 8'd255;
	reg [7:0] w242_bin = 8'd255;
	reg [7:0] w243_bin = 8'd0;
	reg [7:0] w244_bin = 8'd255;
	reg [7:0] w245_bin = 8'd0;
	reg [7:0] w246_bin = 8'd255;
	reg [7:0] w247_bin = 8'd0;
	reg [7:0] w248_bin = 8'd255;
	reg [7:0] w249_bin = 8'd255;
	reg [7:0] w250_bin = 8'd0;
	reg [7:0] w251_bin = 8'd0;
	reg [7:0] w252_bin = 8'd255;
	reg [7:0] w253_bin = 8'd0;
	reg [7:0] w254_bin = 8'd0;
	reg [7:0] w255_bin = 8'd0;

	wire [0:0] x_1_stoch;

	wire [0:0] x_2_stoch;

	wire [0:0] x_3_stoch;

	wire [0:0] x_4_stoch;

	wire [0:0] x_5_stoch;

	wire [0:0] x_6_stoch;

	wire [0:0] x_7_stoch;

	wire [0:0] x_8_stoch;
	wire [255:0] w_stoch;
	wire z_stoch;
	wire init;
	wire running;

	//RNGs for binary->stochastic conversion
	wire [7:0] randx_1_0;
	LFSR_8_bit_added_zero_Sobel3x3_g2 rand_gen_x_1_0 (
		.seed (8'd0),
		.data (randx_1_0),
		.enable (running),
		.restart (init),
		.clk (clk),
		.reset (reset)
	);
	assign x_1_stoch[0] = randx_1_0 < x_1_bin;

	wire [7:0] randx_2_0;
	LFSR_8_bit_added_zero_Sobel3x3_g2 rand_gen_x_2_0 (
		.seed (8'd15),
		.data (randx_2_0),
		.enable (running),
		.restart (init),
		.clk (clk),
		.reset (reset)
	);
	assign x_2_stoch[0] = randx_2_0 < x_2_bin;

	wire [7:0] randx_3_0;
	LFSR_8_bit_added_zero_Sobel3x3_g2 rand_gen_x_3_0 (
		.seed (8'd36),
		.data (randx_3_0),
		.enable (running),
		.restart (init),
		.clk (clk),
		.reset (reset)
	);
	assign x_3_stoch[0] = randx_3_0 < x_3_bin;

	wire [7:0] randx_4_0;
	LFSR_8_bit_added_zero_Sobel3x3_g2 rand_gen_x_4_0 (
		.seed (8'd65),
		.data (randx_4_0),
		.enable (running),
		.restart (init),
		.clk (clk),
		.reset (reset)
	);
	assign x_4_stoch[0] = randx_4_0 < x_4_bin;

	wire [7:0] randx_5_0;
	LFSR_8_bit_added_zero_Sobel3x3_g2 rand_gen_x_5_0 (
		.seed (8'd102),
		.data (randx_5_0),
		.enable (running),
		.restart (init),
		.clk (clk),
		.reset (reset)
	);
	assign x_5_stoch[0] = randx_5_0 < x_5_bin;

	wire [7:0] randx_6_0;
	LFSR_8_bit_added_zero_Sobel3x3_g2 rand_gen_x_6_0 (
		.seed (8'd145),
		.data (randx_6_0),
		.enable (running),
		.restart (init),
		.clk (clk),
		.reset (reset)
	);
	assign x_6_stoch[0] = randx_6_0 < x_6_bin;

	wire [7:0] randx_7_0;
	LFSR_8_bit_added_zero_Sobel3x3_g2 rand_gen_x_7_0 (
		.seed (8'd196),
		.data (randx_7_0),
		.enable (running),
		.restart (init),
		.clk (clk),
		.reset (reset)
	);
	assign x_7_stoch[0] = randx_7_0 < x_7_bin;

	wire [7:0] randx_8_0;
	LFSR_8_bit_added_zero_Sobel3x3_g2 rand_gen_x_8_0 (
		.seed (8'd254),
		.data (randx_8_0),
		.enable (running),
		.restart (init),
		.clk (clk),
		.reset (reset)
	);
	assign x_8_stoch[0] = randx_8_0 < x_8_bin;

	wire [7:0] randw;
	LFSR_8_bit_added_zero_Sobel3x3_g2 rand_gen_w (
		.seed (8'd171),
		.data (randw),
		.enable (running),
		.restart (init),
		.clk (clk),
		.reset (reset)
	);
	assign w_stoch[0] = randw < w0_bin;

	assign w_stoch[1] = randw < w1_bin;

	assign w_stoch[2] = randw < w2_bin;

	assign w_stoch[3] = randw < w3_bin;

	assign w_stoch[4] = randw < w4_bin;

	assign w_stoch[5] = randw < w5_bin;

	assign w_stoch[6] = randw < w6_bin;

	assign w_stoch[7] = randw < w7_bin;

	assign w_stoch[8] = randw < w8_bin;

	assign w_stoch[9] = randw < w9_bin;

	assign w_stoch[10] = randw < w10_bin;

	assign w_stoch[11] = randw < w11_bin;

	assign w_stoch[12] = randw < w12_bin;

	assign w_stoch[13] = randw < w13_bin;

	assign w_stoch[14] = randw < w14_bin;

	assign w_stoch[15] = randw < w15_bin;

	assign w_stoch[16] = randw < w16_bin;

	assign w_stoch[17] = randw < w17_bin;

	assign w_stoch[18] = randw < w18_bin;

	assign w_stoch[19] = randw < w19_bin;

	assign w_stoch[20] = randw < w20_bin;

	assign w_stoch[21] = randw < w21_bin;

	assign w_stoch[22] = randw < w22_bin;

	assign w_stoch[23] = randw < w23_bin;

	assign w_stoch[24] = randw < w24_bin;

	assign w_stoch[25] = randw < w25_bin;

	assign w_stoch[26] = randw < w26_bin;

	assign w_stoch[27] = randw < w27_bin;

	assign w_stoch[28] = randw < w28_bin;

	assign w_stoch[29] = randw < w29_bin;

	assign w_stoch[30] = randw < w30_bin;

	assign w_stoch[31] = randw < w31_bin;

	assign w_stoch[32] = randw < w32_bin;

	assign w_stoch[33] = randw < w33_bin;

	assign w_stoch[34] = randw < w34_bin;

	assign w_stoch[35] = randw < w35_bin;

	assign w_stoch[36] = randw < w36_bin;

	assign w_stoch[37] = randw < w37_bin;

	assign w_stoch[38] = randw < w38_bin;

	assign w_stoch[39] = randw < w39_bin;

	assign w_stoch[40] = randw < w40_bin;

	assign w_stoch[41] = randw < w41_bin;

	assign w_stoch[42] = randw < w42_bin;

	assign w_stoch[43] = randw < w43_bin;

	assign w_stoch[44] = randw < w44_bin;

	assign w_stoch[45] = randw < w45_bin;

	assign w_stoch[46] = randw < w46_bin;

	assign w_stoch[47] = randw < w47_bin;

	assign w_stoch[48] = randw < w48_bin;

	assign w_stoch[49] = randw < w49_bin;

	assign w_stoch[50] = randw < w50_bin;

	assign w_stoch[51] = randw < w51_bin;

	assign w_stoch[52] = randw < w52_bin;

	assign w_stoch[53] = randw < w53_bin;

	assign w_stoch[54] = randw < w54_bin;

	assign w_stoch[55] = randw < w55_bin;

	assign w_stoch[56] = randw < w56_bin;

	assign w_stoch[57] = randw < w57_bin;

	assign w_stoch[58] = randw < w58_bin;

	assign w_stoch[59] = randw < w59_bin;

	assign w_stoch[60] = randw < w60_bin;

	assign w_stoch[61] = randw < w61_bin;

	assign w_stoch[62] = randw < w62_bin;

	assign w_stoch[63] = randw < w63_bin;

	assign w_stoch[64] = randw < w64_bin;

	assign w_stoch[65] = randw < w65_bin;

	assign w_stoch[66] = randw < w66_bin;

	assign w_stoch[67] = randw < w67_bin;

	assign w_stoch[68] = randw < w68_bin;

	assign w_stoch[69] = randw < w69_bin;

	assign w_stoch[70] = randw < w70_bin;

	assign w_stoch[71] = randw < w71_bin;

	assign w_stoch[72] = randw < w72_bin;

	assign w_stoch[73] = randw < w73_bin;

	assign w_stoch[74] = randw < w74_bin;

	assign w_stoch[75] = randw < w75_bin;

	assign w_stoch[76] = randw < w76_bin;

	assign w_stoch[77] = randw < w77_bin;

	assign w_stoch[78] = randw < w78_bin;

	assign w_stoch[79] = randw < w79_bin;

	assign w_stoch[80] = randw < w80_bin;

	assign w_stoch[81] = randw < w81_bin;

	assign w_stoch[82] = randw < w82_bin;

	assign w_stoch[83] = randw < w83_bin;

	assign w_stoch[84] = randw < w84_bin;

	assign w_stoch[85] = randw < w85_bin;

	assign w_stoch[86] = randw < w86_bin;

	assign w_stoch[87] = randw < w87_bin;

	assign w_stoch[88] = randw < w88_bin;

	assign w_stoch[89] = randw < w89_bin;

	assign w_stoch[90] = randw < w90_bin;

	assign w_stoch[91] = randw < w91_bin;

	assign w_stoch[92] = randw < w92_bin;

	assign w_stoch[93] = randw < w93_bin;

	assign w_stoch[94] = randw < w94_bin;

	assign w_stoch[95] = randw < w95_bin;

	assign w_stoch[96] = randw < w96_bin;

	assign w_stoch[97] = randw < w97_bin;

	assign w_stoch[98] = randw < w98_bin;

	assign w_stoch[99] = randw < w99_bin;

	assign w_stoch[100] = randw < w100_bin;

	assign w_stoch[101] = randw < w101_bin;

	assign w_stoch[102] = randw < w102_bin;

	assign w_stoch[103] = randw < w103_bin;

	assign w_stoch[104] = randw < w104_bin;

	assign w_stoch[105] = randw < w105_bin;

	assign w_stoch[106] = randw < w106_bin;

	assign w_stoch[107] = randw < w107_bin;

	assign w_stoch[108] = randw < w108_bin;

	assign w_stoch[109] = randw < w109_bin;

	assign w_stoch[110] = randw < w110_bin;

	assign w_stoch[111] = randw < w111_bin;

	assign w_stoch[112] = randw < w112_bin;

	assign w_stoch[113] = randw < w113_bin;

	assign w_stoch[114] = randw < w114_bin;

	assign w_stoch[115] = randw < w115_bin;

	assign w_stoch[116] = randw < w116_bin;

	assign w_stoch[117] = randw < w117_bin;

	assign w_stoch[118] = randw < w118_bin;

	assign w_stoch[119] = randw < w119_bin;

	assign w_stoch[120] = randw < w120_bin;

	assign w_stoch[121] = randw < w121_bin;

	assign w_stoch[122] = randw < w122_bin;

	assign w_stoch[123] = randw < w123_bin;

	assign w_stoch[124] = randw < w124_bin;

	assign w_stoch[125] = randw < w125_bin;

	assign w_stoch[126] = randw < w126_bin;

	assign w_stoch[127] = randw < w127_bin;

	assign w_stoch[128] = randw < w128_bin;

	assign w_stoch[129] = randw < w129_bin;

	assign w_stoch[130] = randw < w130_bin;

	assign w_stoch[131] = randw < w131_bin;

	assign w_stoch[132] = randw < w132_bin;

	assign w_stoch[133] = randw < w133_bin;

	assign w_stoch[134] = randw < w134_bin;

	assign w_stoch[135] = randw < w135_bin;

	assign w_stoch[136] = randw < w136_bin;

	assign w_stoch[137] = randw < w137_bin;

	assign w_stoch[138] = randw < w138_bin;

	assign w_stoch[139] = randw < w139_bin;

	assign w_stoch[140] = randw < w140_bin;

	assign w_stoch[141] = randw < w141_bin;

	assign w_stoch[142] = randw < w142_bin;

	assign w_stoch[143] = randw < w143_bin;

	assign w_stoch[144] = randw < w144_bin;

	assign w_stoch[145] = randw < w145_bin;

	assign w_stoch[146] = randw < w146_bin;

	assign w_stoch[147] = randw < w147_bin;

	assign w_stoch[148] = randw < w148_bin;

	assign w_stoch[149] = randw < w149_bin;

	assign w_stoch[150] = randw < w150_bin;

	assign w_stoch[151] = randw < w151_bin;

	assign w_stoch[152] = randw < w152_bin;

	assign w_stoch[153] = randw < w153_bin;

	assign w_stoch[154] = randw < w154_bin;

	assign w_stoch[155] = randw < w155_bin;

	assign w_stoch[156] = randw < w156_bin;

	assign w_stoch[157] = randw < w157_bin;

	assign w_stoch[158] = randw < w158_bin;

	assign w_stoch[159] = randw < w159_bin;

	assign w_stoch[160] = randw < w160_bin;

	assign w_stoch[161] = randw < w161_bin;

	assign w_stoch[162] = randw < w162_bin;

	assign w_stoch[163] = randw < w163_bin;

	assign w_stoch[164] = randw < w164_bin;

	assign w_stoch[165] = randw < w165_bin;

	assign w_stoch[166] = randw < w166_bin;

	assign w_stoch[167] = randw < w167_bin;

	assign w_stoch[168] = randw < w168_bin;

	assign w_stoch[169] = randw < w169_bin;

	assign w_stoch[170] = randw < w170_bin;

	assign w_stoch[171] = randw < w171_bin;

	assign w_stoch[172] = randw < w172_bin;

	assign w_stoch[173] = randw < w173_bin;

	assign w_stoch[174] = randw < w174_bin;

	assign w_stoch[175] = randw < w175_bin;

	assign w_stoch[176] = randw < w176_bin;

	assign w_stoch[177] = randw < w177_bin;

	assign w_stoch[178] = randw < w178_bin;

	assign w_stoch[179] = randw < w179_bin;

	assign w_stoch[180] = randw < w180_bin;

	assign w_stoch[181] = randw < w181_bin;

	assign w_stoch[182] = randw < w182_bin;

	assign w_stoch[183] = randw < w183_bin;

	assign w_stoch[184] = randw < w184_bin;

	assign w_stoch[185] = randw < w185_bin;

	assign w_stoch[186] = randw < w186_bin;

	assign w_stoch[187] = randw < w187_bin;

	assign w_stoch[188] = randw < w188_bin;

	assign w_stoch[189] = randw < w189_bin;

	assign w_stoch[190] = randw < w190_bin;

	assign w_stoch[191] = randw < w191_bin;

	assign w_stoch[192] = randw < w192_bin;

	assign w_stoch[193] = randw < w193_bin;

	assign w_stoch[194] = randw < w194_bin;

	assign w_stoch[195] = randw < w195_bin;

	assign w_stoch[196] = randw < w196_bin;

	assign w_stoch[197] = randw < w197_bin;

	assign w_stoch[198] = randw < w198_bin;

	assign w_stoch[199] = randw < w199_bin;

	assign w_stoch[200] = randw < w200_bin;

	assign w_stoch[201] = randw < w201_bin;

	assign w_stoch[202] = randw < w202_bin;

	assign w_stoch[203] = randw < w203_bin;

	assign w_stoch[204] = randw < w204_bin;

	assign w_stoch[205] = randw < w205_bin;

	assign w_stoch[206] = randw < w206_bin;

	assign w_stoch[207] = randw < w207_bin;

	assign w_stoch[208] = randw < w208_bin;

	assign w_stoch[209] = randw < w209_bin;

	assign w_stoch[210] = randw < w210_bin;

	assign w_stoch[211] = randw < w211_bin;

	assign w_stoch[212] = randw < w212_bin;

	assign w_stoch[213] = randw < w213_bin;

	assign w_stoch[214] = randw < w214_bin;

	assign w_stoch[215] = randw < w215_bin;

	assign w_stoch[216] = randw < w216_bin;

	assign w_stoch[217] = randw < w217_bin;

	assign w_stoch[218] = randw < w218_bin;

	assign w_stoch[219] = randw < w219_bin;

	assign w_stoch[220] = randw < w220_bin;

	assign w_stoch[221] = randw < w221_bin;

	assign w_stoch[222] = randw < w222_bin;

	assign w_stoch[223] = randw < w223_bin;

	assign w_stoch[224] = randw < w224_bin;

	assign w_stoch[225] = randw < w225_bin;

	assign w_stoch[226] = randw < w226_bin;

	assign w_stoch[227] = randw < w227_bin;

	assign w_stoch[228] = randw < w228_bin;

	assign w_stoch[229] = randw < w229_bin;

	assign w_stoch[230] = randw < w230_bin;

	assign w_stoch[231] = randw < w231_bin;

	assign w_stoch[232] = randw < w232_bin;

	assign w_stoch[233] = randw < w233_bin;

	assign w_stoch[234] = randw < w234_bin;

	assign w_stoch[235] = randw < w235_bin;

	assign w_stoch[236] = randw < w236_bin;

	assign w_stoch[237] = randw < w237_bin;

	assign w_stoch[238] = randw < w238_bin;

	assign w_stoch[239] = randw < w239_bin;

	assign w_stoch[240] = randw < w240_bin;

	assign w_stoch[241] = randw < w241_bin;

	assign w_stoch[242] = randw < w242_bin;

	assign w_stoch[243] = randw < w243_bin;

	assign w_stoch[244] = randw < w244_bin;

	assign w_stoch[245] = randw < w245_bin;

	assign w_stoch[246] = randw < w246_bin;

	assign w_stoch[247] = randw < w247_bin;

	assign w_stoch[248] = randw < w248_bin;

	assign w_stoch[249] = randw < w249_bin;

	assign w_stoch[250] = randw < w250_bin;

	assign w_stoch[251] = randw < w251_bin;

	assign w_stoch[252] = randw < w252_bin;

	assign w_stoch[253] = randw < w253_bin;

	assign w_stoch[254] = randw < w254_bin;

	assign w_stoch[255] = randw < w255_bin;

	MReSC_Sobel3x3_g2 ReSC (
		.x_1 (x_1_stoch),
		.x_2 (x_2_stoch),
		.x_3 (x_3_stoch),
		.x_4 (x_4_stoch),
		.x_5 (x_5_stoch),
		.x_6 (x_6_stoch),
		.x_7 (x_7_stoch),
		.x_8 (x_8_stoch),
		.w (w_stoch),
		.z (z_stoch)
	);

	reg [7:0] count; //count clock cycles
	wire [7:0] neg_one;
	assign neg_one = -1;

	//Finite state machine. States:
	//0: finished, in need of resetting
	//1: initialized, start counting when start signal falls
	//2: running
	reg [1:0] cs; //current FSM state
	reg [1:0] ns; //next FSM state
	assign init = cs == 1;
	assign running = cs == 2;

	always @(posedge clk or posedge reset) begin
		if (reset) cs <= 0;
		else begin
			cs <= ns;
			if (running) begin
				if (count == neg_one) done <= 1;
				count <= count + 1;
				z_bin <= z_bin + z_stoch;
			end
		end
	end

	always @(*) begin
		case (cs)
			0: if (start) ns = 1; else ns = 0;
			1: if (start) ns = 1; else ns = 2;
			2: if (done) ns = 0; else ns = 2;
			default ns = 0;
		endcase
	end

	always @(posedge init) begin
		count <= 0;
		z_bin <= 0;
		done <= 0;
	end
endmodule
